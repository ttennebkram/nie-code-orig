/*
 *  Copyright 2001 New Idea Engineering, Inc.
 *  Written by Mark Bennett
 *
 *  Read in a PDF file and send a work units to a queue.
 *
 *
 * Two ways to specify PDF file:
 * 1: Spec it as a constant in the location field.
 *    In that case, we read the one file, create a work unit, and we're done.
 * 2: Have it retrieve more than one PDF file by looking at inbound work units
 *    Not yet Implemented!
 */

package nie.processors;

import nie.core.*;

import java.io.*;
import java.net.*;
import java.util.*;
import org.jdom.Element;

public class PDFIn extends Processor
{

	private void __sep__Constructor__() {}
	//////////////////////////////////////////////////////////////////

	public PDFIn( Application inApplication,
		  Queue[] inReadFromQueue,
		  Queue[] inWriteToQueue,
		  Queue[] inUsesQueue,
		  Element inParameters,
		  String inProcID
		  )
	{
		super( inApplication, inReadFromQueue, inWriteToQueue,
		  inUsesQueue, inParameters, inProcID
		  );

		// Tell them not to let us exit until we've done something
		fCanExit = false;

		if( inReadFromQueue != null )
		   fReadQueue = inReadFromQueue[0];
		if( inWriteToQueue != null && inWriteToQueue[0] != null )
			fWriteQueue = inWriteToQueue[0];
		else
		{
			System.err.println( "Input: No queue to write to." );
			System.exit( -1 );
		}


		// If parameters were sent in, save them
		if( inParameters != null )
		{
			try
			{
				fJdh = new JDOMHelper( inParameters );
			}
			catch (Exception e)
			{
				fJdh = null;
				System.err.println(
					"Error: PDFIn: Error creating jdom helper for parameters\n" + e
					);
				System.exit(1);
			}

		}

		//System.err.println( "Input successfully instantiated." );

	}

	/////////////////////////////////////////////
	//
	// And this is where the work gets done.
	//
	/////////////////////////////////////////////
	private void __sep__Main_Logic__ () {}
	///////////////////////////////////////////////////////////////////////

	public void run()
	{
		setStateProcessing();

		try {
			doOpen();
		}
		catch( Exception e ) {
			System.err.println( "can't open" );
			System.err.println( e );
			System.exit( -1 );
		}


		while( true )
		{
			WorkUnit record = null;
			try
			{
				record = getNextRecord();
			}
			catch( Exception e )
			{
				close();
				System.err.println( "error reading record." );
				System.err.println( e );
				System.exit( -1 );
			}

			if( record != null )
			{
				//System.out.println( "Got a record." );
				enqueue( fWriteQueue, record );
				record = null;
			}
			else
				break;

			fCounter ++;
			if( fCounter % kReportInterval == 0 )
			{
				System.out.println( "CSVIn: Processed '" + fCounter +
					"' records." );
			}
		}

		close();

		// Tell the world we're ready to exit
		// fState = kWaiting;
		setExitOK();
		setStateFinished();

		//System.err.println( "Shutting down Input processor." );
	}

	void setExitOK()
	{
		fCanExit = true;
	}

	public boolean canExit()
	{
		return fCanExit;
	}

	private void __sep__Simple_Get_and_Set_Logic__ () {}
	////////////////////////////////////////////////////////

	//public String getDataFormat() {
	//	return "csv";
	//}

	public String getLocation()
	{
		String loc = fJdh.getStringFromAttributeTrimmedOrNull( "location" );
		// For now, location is not required, we may read them in from work units
//		if( loc == null )
//		{
//			System.err.println( "Error: CSVIn: location is a required attribute" );
//			System.exit(-1);
//		}
		return loc;
	}

	boolean getForceFreeForm()
	{
//		// Look for a <free_form/> tag
//		Element tmp = fJdh.findElementByPath(
//			"free_form"
//			);
//		// It's being backwashed if we DID find the tag.
//		return tmp != null;
		return fJdh.getBooleanFromAttribute( "free_form", DEFAULT_FREE_FORM );
	}

	List getFieldMap()
	{
		return fJdh.getListFromAttribute( FIELD_MAP_NAME );
	}

	// Returns NULL if there's no map for this index
	String getFieldMapNameN( int ordinal )
	{
		if( ordinal < 1 )
		{
			System.err.println( "Error: CSVIn: lookup of mapped names"
				+ "was given an invalid index of '" +
				ordinal + "', must be a positive integer"
				);
			return null;
		}

		List fields = getFieldMap();
		// It's fine if there's no field map
		if( fields == null || fields.size() < 1 )
			return null;
		if( ordinal > fields.size() )
		{
			System.err.println( "Warning: CSVIn: lookup of mapped name for index '" +
				ordinal + "' is past end of field map which only has '" +
				fields.size() + "' entries"
				);
			return null;
		}
		return (String)fields.get( ordinal - 1 );
	}

	/***************************************************
	*
	*	Base Stream Operations
	*
	*****************************************************/
	private void __sep__Basic_Stream_Operators__ () {}
	////////////////////////////////////////////////////////

	private void doOpen() throws Exception
	{

		// Bail if it's already open
		if(  inStream != null )
			return;

		if(debug) System.out.println( "\twill open." );

		String loc = getLocation();
		if( loc == null || loc.trim().equals("") )
		{
			throw new Exception( "got a null location attribute" );
		}

		loc = loc.trim();

		// Is it a URL?
		if( loc.startsWith("http://") ||
			loc.startsWith("ftp://")
			)
		{
				if(debug) System.out.println( "\tSeems to be a URL." );

				// From O'Reily Networking pg 210
				URL url = new URL( loc );
				inStream = url.openStream();
				// BufferedReader has readLine()
				// LineNumberReader has readLine AND getLineNumber
				reader = new LineNumberReader(
					new InputStreamReader( inStream ), 2048 );

		}
		// Else assume it's a file
		else
		{
				if(debug) System.out.println( "\tSeems to be a File, opening for reading" );

				File theFile = null;
				try
				{
					theFile = new File(
						System.getProperty( "user.dir" ), loc
						);
					inStream = new FileInputStream( theFile );
				}
				catch (Exception e)
				{
					theFile = new File( loc );
					inStream = new FileInputStream( theFile );
				}

				reader = new LineNumberReader(
					new InputStreamReader( inStream ), 2048 );

		} // end Else it's a normal stream
	}

	private String readNextBlock() throws IOException {
		String buffer = null;
		buffer = ((BufferedReader)reader).readLine();
		return buffer;
	}


	public void close() {
		// Todo: See if we need to flush anything

		if( reader != null ) {
			try { reader.close(); } catch (Exception e) {}
			reader = null;
		}
		if( inStream != null ) {
			try { inStream.close(); } catch (Exception e) {}
			inStream = null;
		}
	}


	/***************************************************
	*
	*	Simple Process Logic
	*
	****************************************************/
	private void __sep__Simple_Logic__() {}
	////////////////////////////////////////////////////////////////

	// Given a line from a CSV file, return a work unit or null
	private WorkUnit parseCSVLine( String inputString )
	{
		// Todo: Obsess over edge cases, null fields, spaces
		// before an opening field quote, etc.

		boolean debug = false;

		WorkUnit returnRecord = null;
		try
		{
			returnRecord = new WorkUnit();
		}
		catch (Exception e)
		{
			close();
			System.err.println( "Error creating WorkUnit" );
			System.err.println( e );
			System.exit( 1 );
		}

		// If we need freeform
		if( getForceFreeForm() )
			returnRecord.forceUserDataToFreeForm();

		StringBuffer buff1 = new StringBuffer( inputString );
		StringBuffer buff2 = null;
		boolean isInField = false;
		boolean isQuotedField = false;
		char c;
		int fieldCounter = 0;

		for( int i=0; i<buff1.length(); i++ )
		{
			c = buff1.charAt(i);

			if(debug) System.out.println( "Char "+i+" is '"+c+"'");

			if( ! isInField )
			{
				// Check for null fields, keep them
				if( c == ',' )
				{
					fieldCounter++;
					//returnRecord.addAnonymousField("");
					registerAField( returnRecord, "", fieldCounter );
				}
				// Else not a null field, start recording
				else
				{
					buff2 = new StringBuffer();
					isInField = true;
					if( c == '"' )
						isQuotedField = true;
					else
						buff2.append(c);
				}
			}
			// Else we are in a field
			else {
				// Do we have a comma?
				if( c == ',' ) {
					// If it's in a quoted field, keep it
					if( isQuotedField )
						buff2.append(c);
					// Not in quotes, so it's the end
					// of a field
					else
					{
						fieldCounter++;
						//returnRecord.addAnonymousField( new String(buff2) );
						registerAField( returnRecord, new String(buff2),
							fieldCounter
							);
						// Adjust states and pointers
						buff2 = null;
						isInField = false;
					}
				}
				// Is it a quote?
				else if( c == '"' ) {
					// Are we in a quoted field?
					if( isQuotedField )
						// Is it an escaped quote
						if( i < buff1.length()-1 &&
							buff1.charAt(i+1)=='"'
						) {
							// Keep the quote
							buff2.append('"');
							// Skip the second quote
							i++;
						}
						// Else it IS an ending quote
						else
						{
							// Skip that char, of course
							// Then create the field
							fieldCounter++;
							//returnRecord.addAnonymousField( new String(buff2) );
							registerAField( returnRecord, new String(buff2),
								fieldCounter
								);
							// Make sure we don't add it again
							buff2 = null;
							// Fix states
							isInField = false;
							isQuotedField = false;
							// Eat chars until we see a comma
							for( i=i+1; i<buff1.length(); i++ )
								if( buff1.charAt(i)==',' )
									break;
						}
					// else we're not in a quoted field
					else
						// Odd, but go ahead and keep it
						buff2.append('"');
				}
				// Else it's some other character
				else
					// Keep it
					buff2.append(c);

			} // End Else we're in a field

		} // End while loop

		// Double check that, when got to the end of the buffer
		// we may have been in the middle of a field
		if( isInField )
		{
			if( buff2 != null )
			{
				fieldCounter++;
				//returnRecord.addAnonymousField( new String(buff2) );
				registerAField( returnRecord, new String(buff2), fieldCounter );
			}
		}

		return returnRecord;
	}


	void registerAField( WorkUnit wu, String contents, int fieldCount )
	{
		String tmpFieldName = getFieldMapNameN( fieldCount );
		if( tmpFieldName == null )
			wu.addAnonymousField( contents );
		else
			wu.addNamedField( tmpFieldName, contents );
	}

	/***************************************************
	*
	*	Higher Level Process Logic
	*
	****************************************************/


	public WorkUnit getNextRecord()
		throws Exception
	{

		String buffer = readNextBlock();

		if( buffer == null )
		{
			if(debug) System.out.println( "Debug: StreamTag:getNextRecord: end of file" );
			return null;
		}

		// form an element
		WorkUnit record = parseCSVLine( buffer );

		// Stamp the runpath of the work unit
		addRunpathEntry( record );

		// return
		return record;
	}

	void addRunpathEntry( WorkUnit inWU )
	{
		inWU.createRunpathEntry( getID() );
	}

	private void __sep__Member_Fields_and_Constants__ () {}
	///////////////////////////////////////////////////////////////

	private static final boolean debug = false;

	private static long fCounter;
	private static final long kReportInterval = 1000;

	// private static final String FIELD_MAP_NAME = "field_map";

	// We really need to bring this in as a tree
	private static final boolean DEFAULT_FREE_FORM = true;

	// When reading from work units, what file name should we use?
	// The tag to put in the XPump config file / script
	private static final String LOCATION_FIELD_CONFIG_TAG = "location_field";
	// The default name we'll look for in the work units we read
	private static final String DEFAULT_LOCATION_FIELD_CONFIG_TAG = "location";


	////////////////////////////////////////////////////////////////

	private boolean fCanExit;

	private Queue fWriteQueue;

	private JDOMHelper fJdh;
	private String lastLocation;
	private InputStream inStream;
	private Reader reader;


}
