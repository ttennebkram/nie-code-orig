/*
 *  Copyright 2001 New Idea Engineering, Inc.
 *  Written by Kevin-Neil Klop and Mark L. Bennett
 *
 *  $Id: HTTPRetrieverV3.java,v 1.1 2004/03/03 20:00:49 mbennett Exp $
 *
 *  $Log: HTTPRetrieverV3.java,v $
 *  Revision 1.1  2004/03/03 20:00:49  mbennett
 *  Source tree from niesrv 226, from Feb 2004
 *
 *	Rev 4 March 2005 mbennett
 *	Update to use caching
 *	Update to allow for blob or tree access
 *
 *  Rev 3.0(1) 2001/11/2 mbennett
 *  Added support for username/password attrs for Basic Authentication
 *  I think it's a "global" setting...
 *  Todo: revisit
 *
 *  Revision 3.0 2001/10/10 mbennett
 *  Rearrange the structure of the program, check variables
 *
 *  Revision 2.0  2001/09/24 mbennett
 *  Change how fields are retrieved and stored using work unit methods
 *  Make default field names
 *
 *  Revision 1.7  2001/08/31 16:29:50  kevin
 *  Implemented new WorkUnits stuff into these processors.
 *
 *  Revision 1.6  2001/08/27 22:15:09  kevin
 *  Altered to match new constructor for processors.
 *
 *  Revision 1.5  2001/08/24 17:04:10  kevin
 *  Added constructor parameter to take the String inID and pass it on
 *  to the Processor class.
 *
 *  Revision 1.4  2001/08/21 03:56:59  kevin
 *  re-indented to match current NIE, Inc. style giude.
 *  No code changes.
 *
 *  Revision 1.3  2001/08/15 20:17:57  kevin
 *  Minor changes in preparation for the Major language/specification.
 *
 *  Revision 1.2  2001/08/07 01:16:21  kevin
 *  Slimmed down the system, added a d few new processors.
 *  Alse made the processors a bit more generic since they were very spider-centric.
 *
 *  Revision 1.1  2001/07/31 21:46:35  kevin
 *  Initial revision
 *
 *
 */

//package nie.processors;
package nie.pump.processors;

import nie.core.*;
import nie.spider.CachingRetriever;
import nie.pump.base.*;
import nie.pump.base.Queue;

import java.net.*;
import java.io.*;

import org.jdom.Element;
import org.jdom.Attribute;

/////////////////////////////////////////////////////
//
// This takes up to three output queues...
//
//	Queue 1: Content Queue - feeds out those URLs that were successfully
//		 retrieved, along with their content.
//	Queue 2: Error queue (optional) - feeds out those URLs that caused
//		 an error during retrieve for any reason.
//
////////////////////////////////////////////////////

public class HTTPRetrieverV4 extends Processor
{
	public String kClassName() { return "HTTPRetrieverV4"; }



	// private static final boolean _debug = false;

	// Helper class used for HTTP Basic authentication
	class NIEAuthenticator extends Authenticator
	{
		private String username;
		private String password;
		NIEAuthenticator( String u, String p )
		{
			super();
			this.username = u;
			this.password = p;
		}
		protected PasswordAuthentication getPasswordAuthentication()
		{
			return new PasswordAuthentication(
				username, password.toCharArray()
				);
		}
	}



	////////////////////////////////////////////
	//
	// Constructor for an HTTP Retriever - it should look exactly like
	// the constructor for a Processor.  No more arguments, no less.  No
	// different parameter types either.  We're strict about this!
	//
	////////////////////////////////////////////

	public HTTPRetrieverV4( Application inApplication,
			  Queue[] inReadFromQueue,
			  Queue[] inWriteToQueue,
			  Queue[] inUsesQueue,
			  Element inParameters,
			  String inID )
	{
		super( inApplication, inReadFromQueue, inWriteToQueue, inUsesQueue, inParameters, inID );
		final String kFName = "constructor";
		final String kExTag = kClassName() + '.' + kFName + ": ";

		if( (inReadFromQueue != null) &&
			(inReadFromQueue.length > 0) &&
			(inReadFromQueue[0] != null) )
			fReadQueue = inReadFromQueue[0];
		else
		{
			fatalErrorMsg( kFName, "passed an invalid queue set." );
			System.exit( -1 );
		}

		if( inWriteToQueue != null )
		{
			if( (inWriteToQueue.length > 0) &&
			(inWriteToQueue[0] != null) )
				fContentQueue = inWriteToQueue[0];
			else
				badQueueList();

			if( inWriteToQueue.length > 1)
				fErrorRetrievingQueue = inWriteToQueue[1];
		}
		else
			badQueueList();

		// If parameters were sent in, save them
		if( inParameters != null )
		{
			try
			{
				fJdh = new JDOMHelper( inParameters );
			}
			catch (Exception e)
			{
				fJdh = null;
				fatalErrorMsg( kFName,
					"Error creating jdom helper for parameter\n" + e
					);
				System.exit(1);
			}
		}
		else
		{
			// System.err.println( "Error: inParameter == null." );
			fatalErrorMsg( kFName, "inParameter == null." );
			// System.err.println( "see doc" );
			// fatalErrorMsg( kFName, "see doc" );
			System.exit(1);
		}


		// Make sure they get the valueus from the tag, vs the cache
		fHaveDoneInit = false;

		// Call the get methods so they will fill their cache
		// they will do an exit if they are not happy
		getURLFieldName();
		getParentURLFieldName();

		getTextContentFieldName();
		getTreeContentFieldName();
		getStatsFieldName();

		getMode();
		// ^^^ Also caches values for these two methods
		// getDoText();
		// getDoTree();

		getAttemptedURLFieldName();
		getUsername();
		getPassword();
		getUserAgentField();
		try {
			setupCacheIfRequested();
		}
		catch( Exception e ) {
			stackTrace( kFName, e,
				"Error setting up cache"
				+ " Will run without a cache."
				);
			fCacheDirName = null;
			fCacheObj = null;
		}

		// switch over to using the cached values
		fHaveDoneInit = true;

		// if( debug )
		// {
			// System.err.println( "HTTPRetrieverV4: CONSTRUCTOR Start." );
			debugMsg( kFName, "Start." );
			// System.err.println( "getURLFieldName()=" + getURLFieldName() );
			debugMsg( kFName, "getURLFieldName()=" + getURLFieldName() );
			//System.err.println( "getTextContentFieldName()="
			//	+ getTextContentFieldName()
			//	);
			debugMsg( kFName, "getTextContentFieldName()="
					+ getTextContentFieldName()
					);
			// System.err.println( "getTreeContentFieldName()="
			//	+ getTreeContentFieldName()
			//	);
			debugMsg( kFName, "getTreeContentFieldName()="
					+ getTreeContentFieldName()
					);
			debugMsg( kFName, "getStatsFieldName()="
					+ getStatsFieldName()
					);
			// System.err.println( "getParentURLFieldName()="
			//	+ getParentURLFieldName()
			//	);
			debugMsg( kFName, "getParentURLFieldName()="
					+ getParentURLFieldName()
					);
			// System.err.println( "getAttemptedURLFieldName()="
			//	+ getAttemptedURLFieldName()
			//	);
			debugMsg( kFName, "getAttemptedURLFieldName()="
					+ getAttemptedURLFieldName()
					);
			// System.err.println( "getUsername()=" + getUsername() );
			debugMsg( kFName, "getUsername()=" + getUsername() );
			// System.err.println( "is set: getPassword()=" + (getPassword()!=null) );
			debugMsg( kFName, "getPassword()=" + (getPassword()!=null) );
			// System.err.println( "getUserAgentField()=" + getUserAgentField() );
			debugMsg( kFName, "getUserAgentField()=" + getUserAgentField() );
		// }


		// Setup basic authentication IF it was specified
		setupOptionalAuthentication();
	}

	private void badQueueList()
	{
		final String kFName = "constructor";
		
		// System.err.println( "Bad output queue list given to HTTPRetrieverV3." );
		fatalErrorMsg( kFName, "Bad output queue list given to HTTPRetrieverV3." );
		// System.err.println( "The output queue list must have at least one item," );
		fatalErrorMsg( kFName, "The output queue list must have at least one item," );
		// System.err.println( "    queue to which to put retrieved URLs." );
		fatalErrorMsg( kFName, "    queue to which to put retrieved URLs." );
		// System.err.println( "    A second queue may be specified to which we will" );
		fatalErrorMsg( kFName, "    A second queue may be specified to which we will" );
		// System.err.println( "    queue URLs that caused errors." );
		fatalErrorMsg( kFName, "    queue URLs that caused errors." );
		System.exit( -1 );
	}

	/////////////////////////////////////////////
	//
	// And this is where the work gets done.
	//
	/////////////////////////////////////////////

	public void run()
	{
		final String kFName = "run";
		
		
		/*
		 * Read a URL String from the queues then retrieve it.
		 * if the retrieve works well, send it to fNormalQueue
		 * if the retrieve goes badly, send it to fErrorQueue
		 */

		//final boolean debug = false;

		// System.err.println( "HTTPRetrieverV4: RUN() Start." );
		debugMsg( kFName, "Start." );


		// Main Loop
		while( true )
		{

			// System.err.println( "HTTPRetrieverV4: run() at Top of Loop" );
			debugMsg( kFName, "at Top of Loop" );

			// WorkUnit lWorkUnit = null;
			mWorkUnit = null;
			boolean success = false;
			String problemMsg = null;

			// Try to dqueue and process a work unit
			try
			{
				// System.err.println( "HTTPRetrieverV4: run() before DQ" );
				debugMsg( kFName, "before DQ" );
				// Get a work unit
				mWorkUnit = (WorkUnit)dequeue( fReadQueue );

				// System.err.println( "HT4: dequeued work unit" );
				debugMsg( kFName, "dequeued work unit" );

				success = processWorkUnit( mWorkUnit );

				// Whoa!  a little too soon!
				//lWorkUnit = null;

				// if(debug)
				// System.err.println( "HT4: processed work unit"
				//		+ ", success=" + success
				//		);
				debugMsg( kFName, "processed work unit"
						+ ", success=" + success
						);

			}   // End of try to dqueue and process a work unit
			// Normal interruption
			catch( InterruptedException ie )
			{
				// System.err.println( "HT4:	caught normal interrupt" );
				debugMsg( kFName, "caught normal interrupt" );
				return;
			}
			catch( Exception lException )
			{
				// System.err.println( "HTTPRetrieverV4: got exception: " +
				//	lException
				//	);
				errorMsg( kFName,
						"General exception"
						+ " mode=" + cMode
						+ " url=" + mFetchURLStr
						);
				stackTrace( kFName, lException, "Stack Trace"  );
				success = false;
			}

			// System.err.println( "HT4:	past exception catches" );
			debugMsg( kFName, "past exception catches" );

			// Re-Queue the work unit, if we have a work unit
			if( null != mWorkUnit )
			{
				// System.err.println( "HT4: work unit was not null" );
				debugMsg( kFName, "work unit was not null" );
				// If there was a problem, mark up the work unit
				if( ! success )
				{
					// if(debug)
						// System.err.println( "HT4: success was FALSE"
						//		+ ", marking work unit invalid"
						//		+ ", message=" + problemMsg
						//		);
						debugMsg( kFName, "success was FALSE"
								+ ", marking work unit invalid"
								+ ", message=" + problemMsg
								);
					// Mark it invalid
					mWorkUnit.setIsValidRecord( false );
					// Add an explanation, if we have any
					if( problemMsg != null && ! problemMsg.trim().equals("") ) {
						mWorkUnit.addNamedField( ERROR_MESSAGE_FIELD,
							problemMsg.trim()
							);
						mWorkUnit.errorMsg( this, kFName, "Problem message: " + problemMsg );
					}
				}
				else
					// System.err.println( "HT3: shows success" );
					debugMsg( kFName, "shows success" );

				// if(debug)
				// System.out.println( "HT3: at bottom of loop" +
				//		", fErrorRetrievingQueue=" + fErrorRetrievingQueue
				//		);
				debugMsg( kFName, "at bottom of loop" +
						", fErrorRetrievingQueue=" + fErrorRetrievingQueue
						);
				// Add it to the correct queue
				// If the work unit was alright, or there's nowhere
				// else to send it
				if( success || fErrorRetrievingQueue == null )
				{
					// System.out.println("HT3: Sending to regular output");
					debugMsg( kFName, "Sending to regular output");
					enqueue( fContentQueue, mWorkUnit );
					mWorkUnit = null;
				}
				// Else we did have a problem and we do have an error queue
				else
				{
					// System.out.println("HT3: Sending to error output");
					debugMsg( kFName, "Sending to error output");
					enqueue( fErrorRetrievingQueue, mWorkUnit );
					mWorkUnit = null;
				}

			}   // End if work unit not null
			else
				// System.err.println( "HT4:	work unit was null" );
				debugMsg( kFName, "work unit was null" );

			// Triple check that we set it to null
			mWorkUnit = null;

			// System.err.println( "HT4:	bottom of main loop" );
			debugMsg( kFName, "bottom of main loop" );

		}   // End of Main Loop

		// if( debug ) System.err.println( "HTTPRetrieverV4: RUN End." );

	}


	// Do the work
	// Logic:
	// Find the URL for us to download, get it, store it, store other info
	// The boolean flag indicates whether or not we think we're OK
	boolean processWorkUnit( WorkUnit inWU )
		throws Exception
	{
		final String kFName = "processWorkUnit";

		// final boolean _debug = false;

		// String lURLString = null;

		// Get the URL we are to download from
		// String fetchURLStr = calculateSourceURL( inWU );
		// memeber field
		mFetchURLStr = calculateSourceURL( inWU );

		mWorkUnit.debugMsg( this, kFName, "url=" + mFetchURLStr );

		// If we found a URL to download
		if( mFetchURLStr == null || mFetchURLStr.trim().equals("") )
		{
			throw new Exception( "There was no URL to fetch" );
		}

		// Store the URL we actually made the
		// request on, if asked to do so
		if( getAttemptedURLFieldName() != null )
		{
			inWU.addNamedField(
				getAttemptedURLFieldName(),
				mFetchURLStr
				);
		}

		// Now actually download the content
		// This may thrown an exception, which we'll pass up the food chain
		byte [] binContent = null;
		String textContent = null;
		Element treeContent = null;

		try
		{
			binContent = fetchContentFromCacheOrWebBin( mFetchURLStr );
			// treeContent = binToTree( binContent );
			// textContent = binToText( binContent );
			// ^^^ Defer these until later
			// debugMsg( kFName, "finished getting content" );
		}
		catch(Exception e)
		{
			inWU.addNamedField( ERROR_MESSAGE_FIELD,
				"Fetch error: " + e
				);
			inWU.setIsValidRecord( false );
			mWorkUnit.stackTrace( this, kFName, e,
			    "Fetch error for URL: " + mFetchURLStr
				);
			return false;
		}
		mDownloadedBytes += binContent.length;
		
		int added = 0;
		// in Stats mode we'll just skip this
		if( null != binContent && binContent.length>0 && getDoText() )
		{

			// if(debug)
				// System.out.println(
				// 		"Content field to store: '" + getTextContentFieldName() + "'"
				// 		);
				debugMsg( kFName,
						"Content field to store: '" + getTextContentFieldName() + "'"
						);
				
			textContent = binToText( binContent );

			// Store the content
			inWU.addNamedField(
				getTextContentFieldName(),
				textContent
				);

			added++;
		}
		// stats mode will ALSO skip this one
		if( null != binContent && binContent.length>0 && getDoTree() )
		{
			// if(debug)
				// System.out.println(
				// 		"Content field to store: '" + getTreeContentFieldName() + "'"
				// 		);
			debugMsg( kFName,
					"Content field to store: '" + getTreeContentFieldName() + "'"
					);

			treeContent = binToTree( binContent );

			Element baseElem = treeContent;
			String baseElemName = getTreeContentFieldName();
			if( null!=baseElemName ) {
				baseElem = new Element( baseElemName );
				baseElem.addContent( treeContent );
			}

			// Store the content
			inWU.addUserDataElement( baseElem );

			added++;
		}

		// Store the stats
		inWU.addNamedField(
			getStatsFieldName(),
			"" + mDownloadedBytes
			);
		
		return added > 0;
	}



	byte [] fetchContentFromCacheOrWebBin( String inURL )
		throws Exception
	{
		byte [] outContent = null;
		// If there's a cache, use it
		if( null!=fCacheObj )
			outContent = fCacheObj.fetchContents( inURL );
		else
			outContent =  NIEUtil.fetchURIContentsBin( inURL );
		return outContent;
	}

	Element binToTree( byte [] inContent )
		throws Exception
	{
		Element outElem = nie.spider.PageInfo.bytesToDom( inContent );
		outElem.detach();
		return outElem;
	}

	String binToText( byte [] inContent )
		throws UnsupportedEncodingException
	{
		String out = new String( inContent, DEFAULT_ENCODING );
		if( out.length() < 1 )
			out = null;
		return out;
	}


	// Download the actual content, return it as a string
	String fetchContentFromWeb( String inFetchURLStr )
		throws Exception
	{
		final String kFName = "fetchContentFromWeb";
		// final boolean debug = false;

		URL lURL = null;
		URLConnection lURLConnection = null;
		try
		{
			lURL = new URL( inFetchURLStr );
			lURLConnection = lURL.openConnection();
		}
//		catch(MalformedException me)
//		{
//			throw new Exception( "Bad URL '" +
//				inFetchURLStr + "', error was '" + me + "'"
//				);
//		}
		catch(IOException ioe)
		{
			throw new Exception( "Error opening URL '" +
				inFetchURLStr + "', error was '" + ioe + "'"
				);
		}

		// Setup the user agent field
		String userAgentField = getUserAgentField();
		if( userAgentField != null )
			lURLConnection.setRequestProperty( HTTP_USER_AGENT_FIELD_SPELLING,
				userAgentField
			);

		boolean lMoreHeaders = true;
		int lHeaderNumber = 0;
		boolean saw200Header = false;

		// Read until no more headers
		while( lMoreHeaders )
		{
			String lHeader = lURLConnection.getHeaderField( lHeaderNumber++ );
			// if( debug )
				// System.err.println( "fetchURL: header: '" + lHeader + "'" );
				debugMsg( kFName, "header: '" + lHeader + "'" );
			if( lHeader != null )
				lHeader = lHeader.trim().toUpperCase();

			// If header not null and starts with http/
			if( lHeader != null && lHeader.startsWith( "HTTP/" ) )
			{
				lMoreHeaders = false;
				lHeader = lHeader.substring( lHeader.indexOf(' ') ).trim();
				if( lHeader.startsWith("200") )
					saw200Header = true;
				else
					throw new Exception( "Got non-200 HTTP header:" +
						lHeader +
						" URL='" + inFetchURLStr + "'"
						);
			}
			if( lHeader == null )
				lMoreHeaders = false;
		}

		//InputStream lStream = lURL.openStream();
		InputStream lStream = lURLConnection.getInputStream();
		StringBuffer strBuff = new StringBuffer();

		int c;
		while( (c=lStream.read()) != -1 )
		{
			strBuff.append( (char)c );
		}

		lStream.close();
		lStream = null;
		lURLConnection = null;

		return new String( strBuff );



	}


	/*************************************************
	*
	*	Simple Get/Set Logic
	*
	*************************************************/
	private void __sep__Simple_Get_and_Set__() {};
	////////////////////////////////////////////////////////////

	String getURLFieldName()
	{
		if( fHaveDoneInit )
			return fURLFieldName;
		else
		{
			String tmpString = fJdh.getStringFromAttribute(
				URL_FIELD_ATTR_NAME
				);
			if( tmpString == null || tmpString.trim().equals("") )
			{
				fURLFieldName = DEFAULT_URL_FIELD_NAME;
			}
			else
			{
				fURLFieldName = tmpString.trim();
			}
		}
		return fURLFieldName;
	}

	String getParentURLFieldName()
	{
		if( fHaveDoneInit )
			return fParentURLFieldName;
		else
		{
			String tmpString = fJdh.getStringFromAttribute(
				PARENT_URL_FIELD_ATTR_NAME
				);
			if( tmpString == null || tmpString.trim().equals("") )
			{
				fParentURLFieldName = null;
			}
			else
			{
				fParentURLFieldName = tmpString.trim();
			}
		}
		return fParentURLFieldName;
	}

	String getAttemptedURLFieldName()
	{
		if( fHaveDoneInit )
			return fAttemptedURLFieldName;
		else
		{
			String tmpString = fJdh.getStringFromAttribute(
				ATTEMPTED_URL_FIELD_ATTR_NAME
				);
			if( tmpString == null || tmpString.trim().equals("") )
			{
				fAttemptedURLFieldName = null;
			}
			else
			{
				fAttemptedURLFieldName = tmpString.trim();
			}
		}
		return fAttemptedURLFieldName;
	}

	String getTextContentFieldName()
	{
		if( fHaveDoneInit )
			return fContentFieldName;
		else
		{
			String tmpString = fJdh.getStringFromAttribute(
				CONTENT_FIELD_ATTR_NAME
				);
			if( tmpString == null || tmpString.trim().equals("") )
			{
				fContentFieldName = DEFAULT_CONTENT_FIELD_NAME;
			}
			else
			{
				fContentFieldName = tmpString.trim();
				cHasTextFieldName = true;
			}
		}
		return fContentFieldName;
	}
	String getTreeContentFieldName()
	{
		if( fHaveDoneInit )
			return fTreeFieldName;
		else
		{
			String tmpString = fJdh.getStringFromAttribute(
				TREE_FIELD_ATTR_NAME
				);
			if( tmpString == null || tmpString.trim().equals("") )
			{
				fTreeFieldName = DEFAULT_TREE_FIELD_NAME;
			}
			else
			{
				fTreeFieldName = tmpString.trim();
				cHasTreeFieldName = true;
			}
		}
		return fTreeFieldName;
	}
	String getStatsFieldName()
	{
		if( fHaveDoneInit )
			return fStatsFieldName;
		else
		{
			String tmpString = fJdh.getStringFromAttribute(
				STATS_FIELD_ATTR_NAME
				);
			if( tmpString == null || tmpString.trim().equals("") )
			{
				fStatsFieldName = DEFAULT_STATS_FIELD_NAME;
			}
			else
			{
				fStatsFieldName = tmpString.trim();
				cHasStatsFieldName = true;
			}
		}
		return fStatsFieldName;
	}
	String getMode()
	{
		final String kFName = "getMode";
		if( fHaveDoneInit )
			return cMode;
		else
		{
			String tmpString = fJdh.getStringFromAttributeTrimOrNull(
				MODE_ATTR
				);
			if( null!=tmpString ) {
				tmpString = tmpString.toLowerCase();
				if( tmpString.equals(MODE_BOTH) || tmpString.equals(MODE_AUTO)
					|| tmpString.equals(MODE_TEXT) || tmpString.equals(MODE_TREE)
					|| tmpString.equals(MODE_STATS) 
				) {
					cMode = tmpString;
				}
				else {
					errorMsg( kFName, "Invalid mode " + tmpString );
				}
			}
		}

		if( null != cMode ) {
			if( cMode.equals(MODE_TEXT) || cMode.equals(MODE_BOTH) )
				cDoText = true;
			if( cMode.equals(MODE_TREE) || cMode.equals(MODE_BOTH) )
				cDoTree = true;
		}
		else if( null==cMode || cMode.equals(MODE_AUTO) ) {
			if( cHasTextFieldName || cHasTreeFieldName ) {
				if( cHasTextFieldName )
					cDoText = true;
				if( cHasTreeFieldName )
					cDoTree = true;
			}
			// Better do both
			else {
				cDoText = true;
				cDoTree = true;
			}
		}

		return cMode;
	}
	boolean getDoText() {
		return cDoText;
	}
	boolean getDoTree() {
		return cDoTree;
	}

	// We will return null if none
	// We do NOT trim the answer, and we WILL return "" if that's what
	// was set, since passwords can be null (I think?)
	String getUsername()
	{
		// Todo: support pulling it from a field
		if( fHaveDoneInit )
			return fUsername;
		else
		{
			String tmpString = fJdh.getStringFromAttribute(
				USERNAME_ATTR_NAME
				);
			if( tmpString == null )
			{
				return null;
			}
			fUsername = tmpString;
		}
		return fUsername;
	}

	// We will return null if none
	// We do NOT trim the answer, and we WILL return "" if that's what
	// was set, since passwords can be null (I think?)
	String getPassword()
	{
		// Todo: support pulling it from a field
		if( fHaveDoneInit )
			return fPassword;
		else
		{
			String tmpString = fJdh.getStringFromAttribute(
				PASSWORD_ATTR_NAME
				);
			if( tmpString == null )
			{
				return null;
			}
			fPassword = tmpString;
		}
		return fContentFieldName;
	}

	// Return the header field to use
	// Note that if you don't want it, use user_agent=""
	String getUserAgentField()
	{
		if( fHaveDoneInit )
			return fUserAgentField;
		else
		{
			String tmpString = fJdh.getStringFromAttribute(
				USER_AGENT_ATTR_NAME
				);
			if( tmpString == null )
			{
				tmpString = fJdh.getStringFromAttribute(
					USER_AGENT_ATTR_SHORT_NAME
					);
			}
			// A little convoluted
			// If they really didn't set either attr, use the default
			if( tmpString == null )
			{
				tmpString = DEFAULT_USER_AGENT_FIELD;
			}
			// If they DID set the attr, but it's an empty string, then
			// they are trying to turn OFF this feature, so we should
			// specifically null it out.
			else if( tmpString.trim().equals("") )
			{
				tmpString = null;
			}
			// Store it
			fUserAgentField = tmpString;
		}
		return fUserAgentField;

	}

	void setupCacheIfRequested()
		throws IOException
	{
		final String kFName = "setupCacheDirIfRequested";
		final String kExTag = kClassName() + '.' + kFName + ": ";

		String fCacheDirName = fJdh.getStringFromAttributeTrimOrNull( CACHE_DIR_ATTR_NAME );
		if( null==fCacheDirName )
			fCacheDirName = fJdh.getStringFromAttributeTrimOrNull( CACHE_DIR_ATTR_SHORT_NAME );
		if( null==fCacheDirName )
		{
			debugMsg( kFName, "no <dir> to specified for caching" );
			return;
		}

		// Do we want to force an absolute path
		if( DEFAULT_FORCE_ABSOLUTE_CACHE_PATH ) {
			File theDir = new File( fCacheDirName );
			if( ! theDir.isAbsolute() ) {
				theDir = theDir.getAbsoluteFile();
				String thePath = null;
				try
				{
					thePath = theDir.getCanonicalPath();
				}
				catch (Exception e)
				{
						throw new IOException( kExTag +
							"Unable to handle cache dir of '" +
							fCacheDirName + "'" +
							" Exception from getCanonicalPath: " + e
							);
				}
				fCacheDirName = thePath;
			}
		}

		fCacheObj = new nie.spider.CachingRetriever( fCacheDirName, true );
		debugMsg( kFName, "Cache dir set to '" + fCacheDirName + "'" );
	}








	private void __sep__Supporting_Logic__() {};
	////////////////////////////////////////////////////////////

	void setupOptionalAuthentication()
	{
		final String kFName = "setupOptionalAuthentication";
		String username = getUsername();
		String password = getPassword();

		// If they're both null then never mind
		if( username == null || password == null )
			return;

		// If only one of the two is missing, set the other to ""
		if( username == null )
		{
			// System.err.println( "Warning: HttpRet: password set but no username"
			//		+ ", setting username to empty string, hope that's OK"
			//		);
			debugMsg( kFName, "password set but no username"
					+ ", setting username to empty string, hope that's OK"
					);
			username = "";
		}
		if( password == null )
		{
			// System.err.println( "Warning: HttpRet: username set but no password"
			//		+ ", setting password to empty string, hope that's OK"
			//		);
			debugMsg( kFName, "username set but no password"
					+ ", setting password to empty string, hope that's OK"
					);
			username = "";
		}

		// Install Authenticator
		Authenticator.setDefault(
			new NIEAuthenticator( username, password )
			);

	}

	// Get the URL from the work unit
	// And if there's a parent link, do the relative calculation
	String calculateSourceURL( WorkUnit wu )
	{
		String childURLField = getURLFieldName();
		String childURL = wu.getUserFieldText( childURLField );
		if( childURL == null || childURL.trim().equals("") )
			return null;
		if( getParentURLFieldName() == null )
			return childURL;
		String parentURL = wu.getUserFieldText( getParentURLFieldName() );
		if( parentURL == null || parentURL.trim().equals("") )
			return childURL;

		return joinURL( parentURL, childURL );
	}

	// Given a URL and a root, calculate a new URL
	String joinURL( String parent, String child )
	{
		
		final String kFName = "run";
		
		// check and normalize the child
		if( child == null || child.trim().equals("") )
			return child;
		child = child.trim();
		// check and normalize the parent
		if( parent == null || parent.trim().equals("") )
			return child;
		parent = tweakBaseURL( parent );

		// init the results
		String retURLStr = child;

		// Now try to form the new URL
		try
		{
			URL parentURL = new URL( parent );
			URL childURL = new URL( parentURL, child );
			retURLStr = childURL.toExternalForm();
		}
		catch( MalformedURLException mfue )
		{
			// System.err.println( "HTTPRetrieverV3: Error combing child url '" +
			//	child + "' with base/parent/reference url '" +
			//	parent + "', returning null.  Exception was: " + mfue
			//	);
			mWorkUnit.stackTrace( this, kFName, mfue, "Error combing child url '" +
			child + "' with base/parent/reference url '" +
			parent + "', returning null."
			);
			return null;
		}

		// Fix up the double slash problem
		retURLStr = cleanDoubleSlash( retURLStr );

		return retURLStr;

	}



	String tweakBaseURL( String inURL )
	{
		// bypass some of the nullish edge cases
		if( inURL == null )
			return null;
		inURL = inURL.trim();
		if( inURL.equals("") )
			return inURL;

		// Setup the return value in advance
		String outURL = inURL;

		// look for the opening double slash
		int doubleSlashAt = inURL.indexOf( "//" );
		int firstSingleSlashAt;
		if( doubleSlashAt >= 0 )
			firstSingleSlashAt = inURL.indexOf( '/', doubleSlashAt+2 );
		else
			firstSingleSlashAt = inURL.indexOf( '/' );

		// At this point we know where the first
		// single slash is
		// If there's NO first single slash then we know that:
		// 1: it's a server only url
		// 2: that does not have a slash
		// So in that case we should add it and return
		// the results

		// If there is no ending slash
		if( firstSingleSlashAt < 0 )
		{
			// Add one and return
			outURL = inURL + '/';
			return outURL;
		}

		// Now find the last slash in the URL
		int lastSingleSlashAt = inURL.lastIndexOf( '/' );
		// Sanity check that we did find one
		if( lastSingleSlashAt < 0 )
			return outURL;

		// If it's at the end, we're OK, just return
		// that URL
		if( lastSingleSlashAt == inURL.length()-1 )
			return inURL;

		// OK we have a path section of the URL
		// and it doesn't end in a slash
		// Lets look at it further

		// Grab the final portion of the path
		String finalPath = inURL.substring( lastSingleSlashAt+1 );

		// If it has a dot OR ? OR # in it we probably don't
		// want to add anything to it
		if( finalPath.indexOf('.') >= 0 ||
			finalPath.indexOf('?') >= 0 ||
			finalPath.indexOf('#') >= 0
			)
		{
			// Just return what we got in
			return inURL;
		}

		// OK at this point we know there is a
		// final bit of path, and it doesn't seem
		// to be a a file name or CGI call so it
		// really looks like a plain old DIR reference
		// so 99 out of 100 times we SHOULD add a slash
		outURL = inURL + '/';
		return outURL;
	}

	String cleanDoubleSlash( String inURL )
	{
		final String kFName = "run";
		
		if( inURL == null )
			return inURL;

		int baseSlashesAt = inURL.indexOf( "//" );
		if( baseSlashesAt < 0 )
			return inURL;

		int prefixLen = baseSlashesAt + "//".length() + 1;
		if( prefixLen == inURL.length() )
			return inURL;
		// Get the http:// portion
		// A little weird math
		// zero based offset = desired length - 1
		// sustring offset = final offset + 1
		// so they cancel
		String prefix = inURL.substring( 0, prefixLen );

		// Get the rest, this is what we'll be working on
		// More strange math
		// Start at prefix length + 1
		// but offset = start length - 1
		// so they cancel
		String suffix = inURL.substring( prefixLen );

		// Short circuit the rest of this mess if we know there's
		// nothing to be done
		if( suffix.indexOf('/') != 0 && suffix.indexOf( "//" ) < 0 )
			return inURL;
		// Else yes there is something for us to do
		else
			// System.err.println( "URLBuilder:cleanDoubleSlash: Start.  url='" +
			// inURL + "'"
			// );
			mWorkUnit.debugMsg( this, kFName, "Start.  url='" +
				inURL + "'"
				);
		
		// Trim off leading /'s, of which there shouldn't be any
		while( suffix.indexOf('/') == 0 )
		{
			if( suffix.length() > 1 )
				suffix = suffix.substring(1);
			else
				suffix = "";
		}

		while( true )
		{
			int doubleSlashAt = suffix.indexOf( "//" );
			if( doubleSlashAt < 0 )
				break;
			int suffixEndingStartsAt = doubleSlashAt + "//".length();
			if( suffixEndingStartsAt < suffix.length()-1 )
			{
				suffix = suffix.substring( 0, doubleSlashAt ) + '/' +
					suffix.substring( suffixEndingStartsAt );
			}
			else
			{
				suffix = suffix.substring( 0, doubleSlashAt ) + '/' ;
			}
		}

		String outURL = prefix + suffix;


		// System.err.println( "URLBuilder:cleanDoubleSlash: End.  url='" +
		// outURL + "'"
		// );
		mWorkUnit.errorMsg( this, kFName, "End.  url='" +
			outURL + "'"
			);

		return outURL;

	}


	private void __sep__Fields_and_Constants__() {};
	////////////////////////////////////////////////////////////

	// private static final String DEFAULT_URL_FIELD_NAME = "url";
	private static final String DEFAULT_URL_FIELD_NAME = 
		PumpConstants.DEFAULT_URL_FIELD_NAME;
	// private static final String DEFAULT_CONTENT_FIELD_NAME = "_content";
	private static final String DEFAULT_CONTENT_FIELD_NAME =
		PumpConstants.DEFAULT_RAW_CONTENT_FIELD_NAME;
	// private static final String DEFAULT_TREE_FIELD_NAME = null;  // Default to none, html at root "_tree";
	private static final String DEFAULT_TREE_FIELD_NAME =
		PumpConstants.DEFAULT_TREE_FIELD_NAME;
	private static final String LIKELY_TREE_FIELD_NAME =
		PumpConstants.LIKELY_TREE_FIELD_NAME;

	private static final String DEFAULT_STATS_FIELD_NAME =
		nie.pump.base.PumpConstants.DEFAULT_STATS_FIELD_NAME;

	// What URL to fetch
	private static final String URL_FIELD_ATTR_NAME =
		"url_field";
	// Where to put the content when you get it back
	private static final String CONTENT_FIELD_ATTR_NAME =
		"content_field";
	private static final String TREE_FIELD_ATTR_NAME =
		"tree_field";
	private static final String STATS_FIELD_ATTR_NAME =
		"stats_field";
	// Optional parent field that URL is relative to
	private static final String PARENT_URL_FIELD_ATTR_NAME =
		"parent_url_field";
	// Optional: the URL that we actually tried to retrieved
	private static final String ATTEMPTED_URL_FIELD_ATTR_NAME =
		"attempted_url_field";
	// Optional: the username and password fields for basic authentication
	private static final String USERNAME_ATTR_NAME =
		"username";
	private static final String PASSWORD_ATTR_NAME =
		"password";

	// Control over the user agent field
	private static final String USER_AGENT_ATTR_NAME =
		"http_user_agent";
		// "http_user_agent_field";
	private static final String USER_AGENT_ATTR_SHORT_NAME =
		"user_agent";
	private static final String CACHE_DIR_ATTR_NAME =
		"cache_dir";
	private static final String CACHE_DIR_ATTR_SHORT_NAME = "dir";

	private static final String MODE_ATTR = "mode";
	// NOTE: If you add a mode, you've at least got to update the big
	// if statement at the top of getMode
	private static final String MODE_BOTH = "both";
	private static final String MODE_TREE = "tree";
	private static final String MODE_TEXT = "text";
	private static final String MODE_AUTO = "auto";
	private static final String MODE_DEFAULT = MODE_AUTO;
	private static final String MODE_STATS = "stats";


	private static final String ERROR_MESSAGE_FIELD =
		"_http_retriever_error_msg";

	// The stupid default field to send to stupid sites so that their stupid
	// scripts will give the correct content  <sign>
	// See other gunk at:
	// http://support.microsoft.com/support/kb/articles/Q272/4/13.ASP
	// Todo: not sure, this may be a "global" setting
	private static final String DEFAULT_USER_AGENT_FIELD =
		"Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0; NetCaptor 6.5.0)";
	private static final String HTTP_USER_AGENT_FIELD_SPELLING =
		"User-Agent";

	public static final String DEFAULT_ENCODING = "ISO-8859-1";
	// Is NOT case sensitive
	// Java standard include UTF-8 and US-ASCII (among others)
	// CP-1252 (Windows), "Latin-1"

	// The main parameters tree
	JDOMHelper fJdh;

	// Caching variables
	private boolean fHaveDoneInit;

	String mFetchURLStr;
	long mDownloadedBytes;
	
	private String fURLFieldName;
	private String fParentURLFieldName;
	private String fAttemptedURLFieldName;
	private String fContentFieldName;
	private boolean cHasTextFieldName;
	private String fTreeFieldName;
	private boolean cHasTreeFieldName;
	private String fStatsFieldName;
	private boolean cHasStatsFieldName;
	private String cMode;
	private boolean cDoText;
	private boolean cDoTree;
	private String fCacheDirName;
	private CachingRetriever fCacheObj;
	private String fUsername;
	private String fPassword;
	private String fUserAgentField;
	// The main queues
	Queue fErrorRetrievingQueue = null;
	Queue fContentQueue = null;
	Queue fReadQueue = null;
	private boolean DEFAULT_FORCE_ABSOLUTE_CACHE_PATH = true;


	WorkUnit mWorkUnit;

}
