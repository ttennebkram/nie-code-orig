// Inspired by
// From http://www.jguru.com/faq/view.jsp?EID=513951 with no copyright
// in answer to a public question, so I assume free to use

// Author 1 method
/**
 * Expands all nodes in a JTree.
 *
 * @param tree      The JTree to expand.
 * @param depth     The depth to which the tree should be expanded.  Zero
 *                  will just expand the root node, a negative value will
 *                  fully expand the tree, and a positive value will
 *                  recursively expand the tree to that depth.
 */
public static void expandJTree (javax.swing.JTree tree, int depth)
{
    javax.swing.tree.TreeModel model = tree.getModel();
    expandJTreeNode(tree, model, model.getRoot(), 0, depth);
} // expandJTree()


/**
 * Expands a given node in a JTree.
 *
 * @param tree      The JTree to expand.
 * @param model     The TreeModel for tree.     
 * @param node      The node within tree to expand.     
 * @param row       The displayed row in tree that represents
 *                  node.     
 * @param depth     The depth to which the tree should be expanded. 
 *                  Zero will just expand node, a negative
 *                  value will fully expand the tree, and a positive
 *                  value will recursively expand the tree to that
 *                  depth relative to node.
 */
public static int expandJTreeNode (javax.swing.JTree tree,
                                   javax.swing.tree.TreeModel model,
                                   Object node, int row, int depth)
{
    if (node != null  &&  !model.isLeaf(node)) {
        tree.expandRow(row);
        if (depth != 0)
        {
            for (int index = 0;
                 row + 1 < tree.getRowCount()  &&  
                            index < model.getChildCount(node);
                 index++)
            {
                row++;
                Object child = model.getChild(node, index);
                if (child == null)
                    break;
                javax.swing.tree.TreePath path;
                while ((path = tree.getPathForRow(row)) != null  &&
                        path.getLastPathComponent() != child)
                    row++;
                if (path == null)
                    break;
                row = expandJTreeNode(tree, model, child, row, depth - 1);
            }
        }
    }
    return row;
} // expandJTreeNode()

// Author 2 method

    public void expandAllNodes() {
        int row = 0;
        while (row < getRowCount()) {
            expandRow(row);
            row++;
        }
    }


    public void collapseAllNodes() {
        int row = getRowCount() - 1;
        while (row >= 0) {
            collapseRow(row);
            row--;
        }
    }

// Author 3 method

nt treeSize = tree.getRowCount();
while (int row < treeSize)
{
tree.expandRow(row);
row++;
}
<<similar to the prev solution>>
for collapse, can just use
treeModel.reload();
// And reply
getRowCount() is not the row count of a fully expanded tree. So the above code can fail to fully expand the tree.

One thing to do is:

for (int row = 0; row < tree.getRowCount(); row++) {
    tree.expandRow(row);
}

that way a new row count is obtained after each expansion.


// Author 4
The follwing code will keep expanding until it is all expanded.Also the code will start from the bottom and work up.

// Expand all the tree rows...
int rc = 0;
do {
rc = this.getTree().getRowCount();
for (int x=rc;x>=0;x--){
this.getTree().expandRow(x);
}
}
while (rc != this.getTree().getRowCount()); // Until there are no more rows to get. i.e the last pass expanded no more new nodes.
